// Generated by zig-wayland

// Copyright © 2008-2013 Kristian Høgsberg
// Copyright © 2013      Rafael Antognolli
// Copyright © 2013      Jasper St. Pierre
// Copyright © 2010-2013 Intel Corporation
// Copyright © 2015-2017 Samsung Electronics Co., Ltd
// Copyright © 2015-2017 Red Hat Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice (including the next
// paragraph) shall be included in all copies or substantial portions of the
// Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// 

const common = @import("common.zig");pub const wm_base = struct {
 extern const xdg_wm_base_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &xdg_wm_base_interface;
 }pub const Error = enum(c_int) {role= 0,defunct_surfaces= 1,not_the_topmost_popup= 2,invalid_popup_parent= 3,invalid_surface_state= 4,invalid_positioner= 5,unresponsive= 6,_,};
};pub const positioner = struct {
 extern const xdg_positioner_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &xdg_positioner_interface;
 }pub const Error = enum(c_int) {invalid_input= 0,_,};
pub const Anchor = enum(c_int) {none= 0,top= 1,bottom= 2,left= 3,right= 4,top_left= 5,bottom_left= 6,top_right= 7,bottom_right= 8,_,};
pub const Gravity = enum(c_int) {none= 0,top= 1,bottom= 2,left= 3,right= 4,top_left= 5,bottom_left= 6,top_right= 7,bottom_right= 8,_,};
pub const ConstraintAdjustment = packed struct(u32) {slide_x: bool = false,slide_y: bool = false,flip_x: bool = false,flip_y: bool = false,resize_x: bool = false,resize_y: bool = false,_padding: u26 = 0,
pub const Enum  = enum(c_int) {none= 0,slide_x= 1,slide_y= 2,flip_x= 4,flip_y= 8,resize_x= 16,resize_y= 32,_,};
};
};pub const surface = struct {
 extern const xdg_surface_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &xdg_surface_interface;
 }pub const Error = enum(c_int) {not_constructed= 1,already_constructed= 2,unconfigured_buffer= 3,invalid_serial= 4,invalid_size= 5,defunct_role_object= 6,_,};
};pub const toplevel = struct {
 extern const xdg_toplevel_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &xdg_toplevel_interface;
 }pub const Error = enum(c_int) {invalid_resize_edge= 0,invalid_parent= 1,invalid_size= 2,_,};
pub const ResizeEdge = enum(c_int) {none= 0,top= 1,bottom= 2,left= 4,top_left= 5,bottom_left= 6,right= 8,top_right= 9,bottom_right= 10,_,};
pub const State = enum(c_int) {maximized= 1,fullscreen= 2,resizing= 3,activated= 4,tiled_left= 5,tiled_right= 6,tiled_top= 7,tiled_bottom= 8,_,};
};pub const popup = struct {
 extern const xdg_popup_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &xdg_popup_interface;
 }pub const Error = enum(c_int) {invalid_grab= 0,_,};
};
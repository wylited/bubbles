// Generated by zig-wayland

// Copyright © 2008-2011 Kristian Høgsberg
// Copyright © 2010-2011 Intel Corporation
// Copyright © 2012-2013 Collabora, Ltd.
// 
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
// 
// The above copyright notice and this permission notice (including the
// next paragraph) shall be included in all copies or substantial
// portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 

const common = @import("common.zig");pub const display = struct {
 extern const wl_display_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_display_interface;
 }pub const Error = enum(c_int) {invalid_object= 0,invalid_method= 1,no_memory= 2,implementation= 3,_,};
};pub const registry = struct {
 extern const wl_registry_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_registry_interface;
 }};pub const callback = struct {
 extern const wl_callback_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_callback_interface;
 }};pub const buffer = struct {
 extern const wl_buffer_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_buffer_interface;
 }};pub const compositor = struct {
 extern const wl_compositor_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_compositor_interface;
 }};pub const surface = struct {
 extern const wl_surface_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_surface_interface;
 }pub const Error = enum(c_int) {invalid_scale= 0,invalid_transform= 1,invalid_size= 2,invalid_offset= 3,_,};
};pub const region = struct {
 extern const wl_region_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_region_interface;
 }};pub const subcompositor = struct {
 extern const wl_subcompositor_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_subcompositor_interface;
 }pub const Error = enum(c_int) {bad_surface= 0,_,};
};pub const subsurface = struct {
 extern const wl_subsurface_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_subsurface_interface;
 }pub const Error = enum(c_int) {bad_surface= 0,_,};
};pub const shm = struct {
 extern const wl_shm_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_shm_interface;
 }pub const Error = enum(c_int) {invalid_format= 0,invalid_stride= 1,invalid_fd= 2,_,};
pub const Format = enum(c_int) {argb8888= 0,xrgb8888= 1,c8= 0x20203843,rgb332= 0x38424752,bgr233= 0x38524742,xrgb4444= 0x32315258,xbgr4444= 0x32314258,rgbx4444= 0x32315852,bgrx4444= 0x32315842,argb4444= 0x32315241,abgr4444= 0x32314241,rgba4444= 0x32314152,bgra4444= 0x32314142,xrgb1555= 0x35315258,xbgr1555= 0x35314258,rgbx5551= 0x35315852,bgrx5551= 0x35315842,argb1555= 0x35315241,abgr1555= 0x35314241,rgba5551= 0x35314152,bgra5551= 0x35314142,rgb565= 0x36314752,bgr565= 0x36314742,rgb888= 0x34324752,bgr888= 0x34324742,xbgr8888= 0x34324258,rgbx8888= 0x34325852,bgrx8888= 0x34325842,abgr8888= 0x34324241,rgba8888= 0x34324152,bgra8888= 0x34324142,xrgb2101010= 0x30335258,xbgr2101010= 0x30334258,rgbx1010102= 0x30335852,bgrx1010102= 0x30335842,argb2101010= 0x30335241,abgr2101010= 0x30334241,rgba1010102= 0x30334152,bgra1010102= 0x30334142,yuyv= 0x56595559,yvyu= 0x55595659,uyvy= 0x59565955,vyuy= 0x59555956,ayuv= 0x56555941,nv12= 0x3231564e,nv21= 0x3132564e,nv16= 0x3631564e,nv61= 0x3136564e,yuv410= 0x39565559,yvu410= 0x39555659,yuv411= 0x31315559,yvu411= 0x31315659,yuv420= 0x32315559,yvu420= 0x32315659,yuv422= 0x36315559,yvu422= 0x36315659,yuv444= 0x34325559,yvu444= 0x34325659,r8= 0x20203852,r16= 0x20363152,rg88= 0x38384752,gr88= 0x38385247,rg1616= 0x32334752,gr1616= 0x32335247,xrgb16161616f= 0x48345258,xbgr16161616f= 0x48344258,argb16161616f= 0x48345241,abgr16161616f= 0x48344241,xyuv8888= 0x56555958,vuy888= 0x34325556,vuy101010= 0x30335556,y210= 0x30313259,y212= 0x32313259,y216= 0x36313259,y410= 0x30313459,y412= 0x32313459,y416= 0x36313459,xvyu2101010= 0x30335658,xvyu12_16161616= 0x36335658,xvyu16161616= 0x38345658,y0l0= 0x304c3059,x0l0= 0x304c3058,y0l2= 0x324c3059,x0l2= 0x324c3058,yuv420_8bit= 0x38305559,yuv420_10bit= 0x30315559,xrgb8888_a8= 0x38415258,xbgr8888_a8= 0x38414258,rgbx8888_a8= 0x38415852,bgrx8888_a8= 0x38415842,rgb888_a8= 0x38413852,bgr888_a8= 0x38413842,rgb565_a8= 0x38413552,bgr565_a8= 0x38413542,nv24= 0x3432564e,nv42= 0x3234564e,p210= 0x30313250,p010= 0x30313050,p012= 0x32313050,p016= 0x36313050,axbxgxrx106106106106= 0x30314241,nv15= 0x3531564e,q410= 0x30313451,q401= 0x31303451,xrgb16161616= 0x38345258,xbgr16161616= 0x38344258,argb16161616= 0x38345241,abgr16161616= 0x38344241,_,};
};pub const shm_pool = struct {
 extern const wl_shm_pool_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_shm_pool_interface;
 }};pub const output = struct {
 extern const wl_output_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_output_interface;
 }pub const Subpixel = enum(c_int) {unknown= 0,none= 1,horizontal_rgb= 2,horizontal_bgr= 3,vertical_rgb= 4,vertical_bgr= 5,_,};
pub const Transform = enum(c_int) {normal= 0,@"90"= 1,@"180"= 2,@"270"= 3,flipped= 4,flipped_90= 5,flipped_180= 6,flipped_270= 7,_,};
pub const Mode = packed struct(u32) {current: bool = false,preferred: bool = false,_padding: u30 = 0,
pub const Enum  = enum(c_int) {current= 0x1,preferred= 0x2,_,};
};
};pub const seat = struct {
 extern const wl_seat_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_seat_interface;
 }pub const Capability = packed struct(u32) {pointer: bool = false,keyboard: bool = false,touch: bool = false,_padding: u29 = 0,
pub const Enum  = enum(c_int) {pointer= 1,keyboard= 2,touch= 4,_,};
};
pub const Error = enum(c_int) {missing_capability= 0,_,};
};pub const pointer = struct {
 extern const wl_pointer_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_pointer_interface;
 }pub const Error = enum(c_int) {role= 0,_,};
pub const ButtonState = enum(c_int) {released= 0,pressed= 1,_,};
pub const Axis = enum(c_int) {vertical_scroll= 0,horizontal_scroll= 1,_,};
pub const AxisSource = enum(c_int) {wheel= 0,finger= 1,continuous= 2,wheel_tilt= 3,_,};
};pub const keyboard = struct {
 extern const wl_keyboard_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_keyboard_interface;
 }pub const KeymapFormat = enum(c_int) {no_keymap= 0,xkb_v1= 1,_,};
pub const KeyState = enum(c_int) {released= 0,pressed= 1,_,};
};pub const touch = struct {
 extern const wl_touch_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_touch_interface;
 }};pub const data_device_manager = struct {
 extern const wl_data_device_manager_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_data_device_manager_interface;
 }pub const DndAction = packed struct(u32) {copy: bool = false,move: bool = false,ask: bool = false,_padding: u29 = 0,
pub const Enum  = enum(c_int) {none= 0,copy= 1,move= 2,ask= 4,_,};
};
};pub const data_source = struct {
 extern const wl_data_source_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_data_source_interface;
 }pub const Error = enum(c_int) {invalid_action_mask= 0,invalid_source= 1,_,};
};pub const data_device = struct {
 extern const wl_data_device_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_data_device_interface;
 }pub const Error = enum(c_int) {role= 0,_,};
};pub const data_offer = struct {
 extern const wl_data_offer_interface: common.Interface;
 pub inline fn getInterface() *const common.Interface {
  return &wl_data_offer_interface;
 }pub const Error = enum(c_int) {invalid_finish= 0,invalid_action_mask= 1,invalid_action= 2,invalid_offer= 3,_,};
};